{"version":3,"sources":["component/Navigator.module.css","component/Images/defphoto.jpeg","logo.svg","component/Header.js","component/Navigator.js","component/Home.js","component/Register.js","component/Lily.js","component/Menu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","header","Navigator","className","style","navigator","to","navLink","Component","Home","props","state","search","Register","changeName","e","setState","name","target","value","age","address","password","img","postArr","changeAge","changeAddress","changePassword","addUser","add","img1","type","onChange","this","onClick","Lily","changeCity","city","users","Menu","fetch","then","response","json","data","exact","path","render","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d63b0e20.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigator\":\"Navigator_navigator__1OxZ1\",\"navLink\":\"Navigator_navLink__2ysfR\"};","module.exports = __webpack_public_path__ + \"static/media/defphoto.75592b97.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\n\nexport default function header() {\n    return (\n        <div>\n            <h1>facebook</h1>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport {Link} from 'react-router-dom';\nimport style from './Navigator.module.css';\n\n\nexport default class Navigator extends Component {\n    render() {\n        return (\n            <div className={style.navigator}>\n                <div><Link to=\"/Home\" > home </Link></div>\n                <div><Link to=\"/Myaccount\" className={style.navLink}>My account</Link></div>\n                <div><Link to=\"/Update\">Update</Link></div>\n                <div><Link to=\"/Log out\">Log out</Link></div>\n                <div><Link to=\"/Register\">Register</Link></div>\n                <div><Link to=\"/Lily\">Lily</Link></div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Home extends Component {\n        constructor(props){\n            debugger\n            super(props);\n            this.state = {\n                search:''\n            }}\n    render() {\n        return (\n            <div>\n                \n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport img1 from './Images/defphoto.jpeg';\n\n\nexport default class Register extends Component {\n    \n    constructor(props){\n        super(props);\n        this.state={\n            name:'',\n            age:'',\n            address:'',\n            password:'',\n            img: img1,\n            postArr: ['This is my first post','This is my second post']\n        }\n    }\n\n    changeName =(e) => {\n        this.setState({name: e.target.value , age: this.state.age, address: this.state.address, password:this.state.password, img:this.state.img,postArr:this.state.postArr} )\n    }\n    \n    changeAge = (e) => {\n        this.setState({name: this.state.name, age: e.target.value, address: this.state.address, password:this.state.password, img:this.state.img, postArr:this.state.postArr})\n    }\n\n    changeAddress = (e) => {\n        this.setState({name: this.state.name, age: this.state.age, address: e.target.value, password:this.state.password, img:this.state.img, postArr:this.state.postArr})\n    }\n\n    changePassword = (e) => {\n        this.setState({name: this.state.name, age: this.state.age, address: this.state.age, password:e.target.value, img:this.state.img, postArr:this.state.postArr})\n    }\n\n    addUser = () => {\n        this.props.add(this.state.name, this.state.age, this.state.address, this.state.password, this.state.img, this.state.postArr)\n    }\n\n\n    \n    render() {\n        return (\n            <div>\n                <div>Name: <input type='text' onChange={this.changeName}/></div>\n                <div>Age: <input type='number' onChange={this.changeAge}/></div>\n                <div>Address: <input type='text' onChange={this.changeAddress}/></div>\n                <div>Password: <input type='password' onChange={this.changePassword}/></div>\n                <button onClick={this.addUser}>Add User</button>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Lily extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            users:props.users,\n            city:''\n        }\n    }\n\n    changeCity =(e) => {\n        this.setState({city: e.target.value} )\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                <div>city: <input type='text' onChange={this.changeCity}/></div>\n                <button onClick={this.addUser}>search</button>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Header from './Header.js';\nimport Navigator from './Navigator.js';\nimport Home from './Home.js';\nimport Register from './Register.js';\nimport Lily from './Lily.js';\n\nexport default class Menu extends Component {\n\n    constructor(props){\n        super(props);\n        this.state={\n            users:[]\n        }\n    }\n    \n    \n    componentWillMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data=>{\n            this.setState({\n                users:data\n            })\n        })\n    }\n\n    addUser = (name,age,address,password,img,postArr)=>{\n        this.setState({\n            users:[...this.state.users,{name:name,age:age,address:address,password:password,img:img,postArr:postArr }]\n        });\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Router>\n                    <Header/>\n                    <Navigator/>\n                    <Switch>\n                    <Route exact path='/Register' render={(props) => <Register add={this.addUser}/>}/>  \n                    <Route exact path='/Home' render={(props) => <Home {...props} users={this.state.users} />} />\n                    <Route exact path='/Lily' render={(props) => <Lily {...props} users={this.state.users} />} />\n                        \n                       \n\n                    </Switch>\n                </Router>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Menu from './component/Menu.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Menu/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}